from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework.permissions import AllowAny
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework import status
from rest_framework.generics import CreateAPIView,
from backend.models import CustomUser
from .serializers import CustomUserSerializer, EmailAuthTokenSerializer



class UserCreateAPIView(CreateAPIView):
    queryset = CustomUser.objects.all()
    serializer_class = CustomUserSerializer
    permission_classes = (AllowAny,)

class CustomAuthToken(ObtainAuthToken):
    serializer_class = EmailAuthTokenSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data, context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']

        token, created = Token.objects.get_or_create(user=user)
        return Response({
            'token_type': 'token',
            'token': token.key,
            'user_id': user.pk,
            'email': user.email
        })

class LogoutAPIView(APIView):
    def get(self, request, format=None):
        request.user.auth_token.delete()
        data = {
            'message': 'logout was successfully'
        }
        return Response(data=data, status=status.HTTP_200_OK)